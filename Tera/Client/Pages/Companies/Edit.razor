@page "/Companies/edit/{Id:guid}"

@attribute [Authorize]

@inject HttpClient Http
@inject HttpClient httpClient

@inject NavigationManager Navigation
<h1>Edit Company</h1>

<EditForm Model="Company" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="shadow-sm p-3 mt-3 ml-3 mr-3 mb-3 bg-white rounded-lg mx-auto" style="width:75%">

        <div class="card-body mx-auto" style="width:72%; min-width:55%">

            <h3 class="card-title">Edit company details</h3>
            <h6 class="card-subtitle mb-2 text-muted">Modify values of a company</h6>
            <br />

            <div class="form-group">
                <label class="control-label">Company Name</label>
                <InputText @bind-Value="Company.companyName" class="form-control" />
                <ValidationMessage For="@(() => Company.companyName)" />
            </div>

            <div class="form-group">
                <label class="control-label">Company Description</label>
                <InputText @bind-Value="Company.companyDescription" class="form-control" />
                <ValidationMessage For="@(() => Company.companyDescription)" />
            </div>

            <br />

            <a class="btn btn-secondary ml-2" href="/Companies">Back</a>

            <button type="submit" class="btn btn-primary">
                Update
            </button>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }

    private Company Company { get; set; } = new Company();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Company = await Http.GetFromJsonAsync<Company>($"/api/Companies/{Id}");
        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("Ticket index page exception caught: " + e);
        }

        //Console.WriteLine("Parameter: " + Id.ToString());
        //if (App.Tickets.ContainsKey(Id))
        //    Ticket = App.Tickets[Id];
        //else
        //    Console.WriteLine("Id does not exist.");
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/Companies/{Company.CompanyId}", Company);
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/Companies");
        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("Ticket index page exception caught: " + e);
        }
        //Console.WriteLine("Form edited");
        //Console.WriteLine("Ticket name: " + Ticket.Name);
        //Console.WriteLine("Ticket descriptions: " + Ticket.Description);
        //
        //App.Tickets[Id] = Ticket;
        //Navigation.NavigateTo("/Tickets");
    }
}

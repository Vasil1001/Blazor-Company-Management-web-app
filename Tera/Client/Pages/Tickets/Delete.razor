@page "/Tickets/delete/{Id:guid}"

@attribute [Authorize]

@inject HttpClient Http
@inject HttpClient httpClient
@inject NavigationManager Navigation

<EditForm Model="Ticket" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="shadow-sm p-3 mt-3 ml-3 mr-3 mb-3 bg-white rounded-lg mx-auto" style="width:45%">

        <div class="card-body mx-auto" style="width:67%; min-width:80%">

            <h3>Please confirm you want to delete the following ticket?</h3>
            <br />
            <ul class="list-group">

                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <h5 class="mb-1">
                        Ticket Name
                    </h5>

                    <h5 class="mb-1">
                        @Ticket.Name
                    </h5>
                </li>

                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <h5 class="mb-1">
                        Ticket Status

                    </h5>

                    <h5 class="mb-1">
                        @Ticket.TicketStatus
                    </h5>


                </li>

                <li class="list-group-item ">
                    <h5 class="mb-1">
                        Ticket Description <br /><br />
                        @Ticket.Description
                    </h5>
                </li>


            </ul>
            <br />
            <a class="btn btn-secondary ml-2" href="/Tickets">Back</a>

            <button type="submit" class="btn btn-danger">
                Delete Ticket
            </button>

        </div>
    </div>


</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Ticket Ticket { get; set; } = new Ticket();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            Ticket = await Http.GetFromJsonAsync<Ticket>($"/api/Tickets/{Id}");
        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("Ticket index page exception caught: " + e);
        }

    }

    private async void HandleValidSubmit()
    {
        try
        {
            await Http.DeleteAsync($"/api/Tickets/{Id}");

            var response = await Http.PutAsJsonAsync($"/api/Tickets/{Ticket.Id}", Ticket);
            response.EnsureSuccessStatusCode();

        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("Ticket index page exception caught: " + e);
        }

        Navigation.NavigateTo("/Tickets"); //after action go back to index page
    }
}

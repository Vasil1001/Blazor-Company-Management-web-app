@page "/Users/delete/{Id:guid}"

@attribute [Authorize]

@inject HttpClient Http
@inject HttpClient httpClient
@inject NavigationManager Navigation

<EditForm Model="User" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="shadow-sm p-3 mt-3 ml-3 mr-3 mb-3 bg-white rounded-lg mx-auto" style="width:45%">

        <div class="card-body mx-auto" style="width:67%; min-width:80%">

            <h3>Please confirm you want to delete the following user?</h3>
            <br />
            <ul class="list-group">

                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <h5 class="mb-1">
                        First Name
                    </h5>

                    <h5 class="mb-1">
                        @User.FirstName
                    </h5>
                </li>

                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <h5 class="mb-1">
                        Last Name
                    </h5>

                    <h5 class="mb-1">
                        @User.LastName
                    </h5>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <h5 class="mb-1">
                        User Email <br />
                        @User.Email

                    </h5>
                </li>
            </ul>

            <br />

            <a class="btn btn-secondary ml-2" href="/Users">Back</a>

            <button type="submit" class="btn btn-danger">
                Delete User
            </button>

        </div>
    </div>


</EditForm>
@code {
    [Parameter]
    public Guid Id { get; set; }

    private User User { get; set; } = new User();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            User = await Http.GetFromJsonAsync<User>($"/api/Users/{Id}");
        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("Ticket index page exception caught: " + e);
        }

    }

    private async void HandleValidSubmit()
    {
        try
        {
            await Http.DeleteAsync($"/api/Users/{Id}");

            var response = await Http.PutAsJsonAsync($"/api/Users/{Id}", User);
            response.EnsureSuccessStatusCode();

        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("Ticket index page exception caught: " + e);
        }

        Navigation.NavigateTo("/Users"); //after action go back to index page

    }

}

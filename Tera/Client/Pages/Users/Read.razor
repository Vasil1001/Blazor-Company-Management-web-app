@page "/Users/details/{Id:guid}"

@attribute [Authorize]

@inject HttpClient Http
@inject HttpClient httpClient
@inject NavigationManager Navigation

<div class="shadow-sm p-3 mt-3 ml-3 mr-3 mb-3 bg-white rounded-lg mx-auto" style="width:45%">
    <div class="card-body mx-auto" style="width:67%; min-width:55%">
        <h3 class="card-title">Details for @User.FirstName</h3>
        <h6 class="card-subtitle mb-2 text-muted">View further details on selected user</h6>
        <br />

        <ul class="list-group">

            <li class="list-group-item d-flex justify-content-between align-items-center">
                <h5 class="mb-1">
                    First Name
                </h5>

                <h5 class="mb-1">
                    @User.FirstName
                </h5>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <h5 class="mb-1">
                    Last Name
                </h5>

                <h5 class="mb-1">
                    @User.LastName
                </h5>
            </li>
            <li class="list-group-item">
                <h5 class="mb-1">
                    User Email <br /><br /> @User.Email
                </h5>
            </li>


        </ul>

        <br />
        <a class="btn btn-secondary ml-2" href="/Users">Back</a>
    </div>
</div>


@code {
    [Parameter]
    public Guid Id { get; set; }
    private List<User> Users = new List<User>();
    private List<Ticket> Tickets = new List<Ticket>();

    private Ticket Ticket { get; set; } = new Ticket();
    private User User { get; set; } = new User();





    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = await Http.GetFromJsonAsync<User>($"/api/Users/{Id}");
            Users = await Http.GetFromJsonAsync<List<User>>("/api/Users");

            Ticket = await Http.GetFromJsonAsync<Ticket>($"/api/Tickets/{Id}");
            Tickets = await Http.GetFromJsonAsync<List<Ticket>>("/api/Ticket");

        }

        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        catch (Exception e)
        {
            Console.WriteLine("User index page exception caught: " + e);
        }
    }

}
